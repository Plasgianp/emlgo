#!/usr/bin/env python3
# PYTHON_ARGCOMPLETE_OK

from emlgolib import *
import os
import argparse
import argcomplete

def main():
    parser = argparse.ArgumentParser(description='Process .eml files to HTML and/or modify href in HTML files.')
    parser.add_argument('--emls_to_htmls', '-r', action='store_true', help='Convert .eml files to HTML')
    parser.add_argument('--modify_href', '-u', action='store_true', help='Add {{.URL}} href in HTML files')
    parser.add_argument('--script_removal', '-sr', action='store_true', help='Remove all script content in HTML files')
    parser.add_argument('--modify_email', action='store_true', help='Modify email addresses in HTML files')
    parser.add_argument('--directory', '-d', type=str, help='Directory containing .eml or HTML files')
    parser.add_argument('--eml_file', '-e', type=str, help='Convert a single .eml file to HTML')
    parser.add_argument('--html_file', '-f', type=str, help='Add {{.URL}} href in a single HTML file')
    parser.add_argument('--go', '-a', type=str, help='Combine --eml_file, --html_file, and --modify_email')
    parser.add_argument('--goes', '-all', action='store_true', help='Does --go recursively')
    argcomplete.autocomplete(parser)
    args = parser.parse_args()

    if not any(vars(args).values()):
        parser.print_help()
        return

    if args.emls_to_htmls:
        if args.directory:
            directory = args.directory
            for root, dirs, files in os.walk(directory):
                for file in files:
                    if file.endswith('.eml'):
                        eml_file = os.path.join(root, file)
                        html_content = eml_to_html(eml_file)
                        output_file = os.path.join(root, f"{os.path.splitext(file)[0]}.html")
                        with open(output_file, 'w') as output:
                            output.write(html_content)
        else:
            print("Please specify a directory with -d or --directory flag.")

    if args.modify_href:
        if args.directory:
            directory_path = args.directory
            new_href = "{{.URL}}" # we can add the website "you've been phished"
            for root, dirs, files in os.walk(directory_path):
                for file in files:
                    if file.endswith('.html') or file.endswith('.htm'):
                        html_file = os.path.join(root, file)
                        add_href_to_file(html_file, new_href)
                        
        else:
            print("Please specify a directory with -d or --directory flag.")

    if args.eml_file:
        eml_file = args.eml_file
        if os.path.exists(eml_file) and eml_file.endswith('.eml'):
            html_content = eml_to_html(eml_file)
            output_file = os.path.splitext(eml_file)[0] + ".html"
            with open(output_file, 'w') as output:
                output.write(html_content)
        else:
            print("Invalid .eml file specified.")

    if args.html_file:
        html_file = args.html_file
        if os.path.exists(html_file) and (html_file.endswith('.html') or html_file.endswith('.htm')):
            add_href_to_file(html_file, '{{.URL}}')
        else:
            print("Invalid HTML file specified.")
    if args.go:
        eml_file = args.go
        if os.path.exists(eml_file) and eml_file.endswith('.eml'):
            html_content = eml_to_html(eml_file)
            modified_html = anonymizer(html_content,nomi,cognomi)
            modified_html_with_href = add_href_to_anchor_tags(modified_html, '{{.URL}}')
            output_file = os.path.splitext(eml_file)[0] + ".html"
            with open(output_file, 'w') as output:
                output.write(modified_html_with_href)
        else:
            print("Invalid .eml file specified.")
        return
    if args.goes:
        if args.directory:
            gophishing_everything(args.directory)
        else:
            print("Please specify a directory with -d or --directory flag.")
        return
    if args.script_removal:
        if args.directory:
            directory_path = args.directory
            remove_scripts_from_directory(directory_path)
        elif args.html_file:
            html_file = args.html_file
            if os.path.exists(html_file) and (html_file.endswith('.html') or html_file.endswith('.htm')):
                remove_scripts_from_file(html_file)
            else:
                print("Invalid HTML file specified.")
        else:
            print("Please specify a directory with -d or --directory flag or an HTML file with --html_file flag.")
        return

if __name__ == "__main__":
    main()
