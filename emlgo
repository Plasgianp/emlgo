#!/usr/bin/env python3
# PYTHON_ARGCOMPLETE_OK

from emlgolib import *
from goapi import *
import os
import re
from email import policy
from email.parser import BytesParser
from bs4 import BeautifulSoup
import argparse
import argcomplete
from dotenv import load_dotenv

load_dotenv()


def main():
    url = os.getenv('url')
    api_key = os.getenv('api_key')
    parser = argparse.ArgumentParser(description='Process .eml files to HTML and/or modify href in HTML files.')
    parser.add_argument('--emls_to_htmls', '-r', action='store_true', help='Convert .eml files to HTML')
    parser.add_argument('--modify_href', '-u', action='store_true', help='Add {{.URL}} href in HTML files')
    parser.add_argument('--script_removal', '-sr', action='store_true', help='Remove all script content in HTML files')
    parser.add_argument('--modify_email', action='store_true', help='Modify email addresses in HTML files')
    parser.add_argument('--directory', '-d', type=str, help='Directory containing .eml or HTML files')
    parser.add_argument('--eml_file', '-e', type=str, help='Convert a single .eml file to HTML')
    parser.add_argument('--html-file', '-f', type=str, help='Add {{.URL}} href in a single HTML file')
    parser.add_argument('--go', '-a', type=str, help='Combine --eml_file, --html-file, and --modify_email')
    parser.add_argument('--goes', '-all', help='Does --go recursively in a dir')
    parser.add_argument('--get-campaign-summary', '-gcs',type=int, help='Get Summary of a campaign')
    parser.add_argument('--get-campaigns-summaries', action='store_true', help='Get Summary of all campaigns')
    parser.add_argument('--post-group', "-pg",type=str, help='Create New Group')
    parser.add_argument('--post-template', "-pt",type=str, help='Create New Template. If a directory is given it will upload \
        ALL html file on the server(-d not needed)')
    
    argcomplete.autocomplete(parser)
    args = parser.parse_args()

    if not any(vars(args).values()):
        parser.print_help()
        return
    #----------------------------------------
    # Gophish api
    manager = CampaignManager(url, api_key)

    if args.post_template:
        # Check if it's a directory or a file and call the appropriate function
        if os.path.isdir(args.post_template):
            # It's a directory, so create multiple templates from the files in that directory
            manager.delete_all_templates()
            print(f"Creating templates from files in directory: {args.post_template}")
            manager.create_template(args.post_template, directory=True)
        else:
            # It's a file, so create a template from that single HTML file
            print(f"Creating template from file: {args.post_template}")
            manager.create_template(args.post_template)

    if args.post_group:
        if args.post_group.endswith(".csv"):
            manager.create_group(str(args.post_group[:-4]), args.post_group)
        else:
            print("Please specify a .csv file formatted with 4 columns named\nFirst Name, Last Name, Email, Position")

    if args.get_campaign_summary:
        try:
            manager.get_campaign_summary(args.get_campaign_summary)
        except Exception as e:
            print("Please specify id of the campaign")

    if args.get_campaigns_summaries:
        try:
            manager.get_campaigns_summaries()
        except Exception as e:
            print("Something went wrong. Control your '.env'.")

    #----------------------------------------
    # Eml and Template Manager
    if args.emls_to_htmls:
        if args.directory:
            directory = args.directory
            for root, dirs, files in os.walk(directory):
                for file in files:
                    if file.endswith('.eml'):
                        eml_file = os.path.join(root, file)
                        html_content = eml_to_html(eml_file)
                        output_file = os.path.join(root, f"{os.path.splitext(file)[0]}.html")
                        with open(output_file, 'w') as output:
                            output.write(html_content)
        else:
            print("Please specify a directory with -d or --directory flag.")

    if args.modify_href:
        if args.directory:
            directory_path = args.directory
            new_href = "{{.URL}}" # you can add the website "you've been phished"
            for root, dirs, files in os.walk(directory_path):
                for file in files:
                    if file.endswith('.html') or file.endswith('.htm'):
                        html_file = os.path.join(root, file)
                        add_href_to_file(html_file, new_href)
                        
        else:
            print("Please specify a directory with -d or --directory flag.")

    if args.eml_file:
        eml_file = args.eml_file
        if os.path.exists(eml_file) and eml_file.endswith('.eml'):
            html_content = eml_to_html(eml_file)
            output_file = os.path.splitext(eml_file)[0] + ".html"
            with open(output_file, 'w') as output:
                output.write(html_content)
        else:
            print("Invalid .eml file specified.")

    if args.html_file:
        html_file = args.html_file
        if os.path.exists(html_file) and (html_file.endswith('.html') or html_file.endswith('.htm')):
            add_href_to_file(html_file, '{{.URL}}')
        else:
            print("Invalid HTML file specified.")

    if args.go:
        eml_file = args.go
        if os.path.exists(eml_file) and eml_file.endswith('.eml'):
            html_content = eml_to_html(eml_file)
            modified_html = anonymizer(html_content)
            modified_html_with_href = add_href_to_anchor_tags(modified_html, '{{.URL}}')
            output_file = os.path.splitext(eml_file)[0] + ".html"
            with open(output_file, 'w') as output:
                output.write(modified_html_with_href)
        else:
            print("Invalid .eml file specified.")
        return
    if args.goes:
        try:
            gophishing_everything(args.goes)
        except Exception as e:
            print("Please specify a directory!")
            return

    if args.script_removal:
        if args.directory:
            directory_path = args.directory
            remove_scripts_from_directory(directory_path)
        elif args.html_file:
            html_file = args.html_file
            if os.path.exists(html_file) and (html_file.endswith('.html') or html_file.endswith('.htm')):
                remove_scripts_from_file(html_file)
            else:
                print("Invalid HTML file specified.")
        else:
            print("Please specify a directory with -d or --directory flag or an HTML file with --html_file flag.")
        return

if __name__ == "__main__":
    main()
