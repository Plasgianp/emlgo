#!/usr/bin/env python3
# PYTHON_ARGCOMPLETE_OK

import os
import argparse
import argcomplete
from email import policy
from email.parser import BytesParser
from bs4 import BeautifulSoup
import re
from lxml import etree

def read_values_from_file(file_path):
    values = []
    with open(file_path, 'r') as file:
        for line in file:
            # Assuming each value is on a separate line
            value = line.strip()  # Remove leading/trailing whitespace
            values.append(value)
    return values

def main():
    parser = argparse.ArgumentParser(description='Process .eml files to HTML and/or modify href in HTML files.')
    parser.add_argument('--emls_to_htmls', '-r', action='store_true', help='Convert .eml files to HTML')
    parser.add_argument('--modify_href', '-u', action='store_true', help='Add {{.URL}} href in HTML files')
    parser.add_argument('--script_removal', '-sr', action='store_true', help='Remove all script content in HTML files')
    parser.add_argument('--modify_email', action='store_true', help='Modify email addresses in HTML files')
    parser.add_argument('--directory', '-d', type=str, help='Directory containing .eml or HTML files')
    parser.add_argument('--eml_file', '-e', type=str, help='Convert a single .eml file to HTML')
    parser.add_argument('--html_file', '-f', type=str, help='Add {{.URL}} href in a single HTML file')
    parser.add_argument('--go', '-a', type=str, help='Combine --eml_file, --html_file, and --modify_email')
    parser.add_argument('--goes', '-all', action='store_true', help='Does --go recursively')
    argcomplete.autocomplete(parser)
    args = parser.parse_args()


    if not any(vars(args).values()):
        parser.print_help()
        return
    
    if args.emls_to_htmls:
        if args.directory:
            directory = args.directory
            for root, dirs, files in os.walk(directory):
                for file in files:
                    if file.endswith('.eml'):
                        eml_file = os.path.join(root, file)
                        html_content = eml_to_html(eml_file)
                        output_file = os.path.join(root, f"{os.path.splitext(file)[0]}.html")
                        with open(output_file, 'w') as output:
                            output.write(html_content)
        else:
            print("Please specify a directory with -d or --directory flag.")

    if args.modify_href:
        if args.directory:
            directory_path = args.directory
            new_href = "www.google.com" # we can add the website "you've been phished"
            add_href_to_directory(directory_path, new_href)
        else:
            print("Please specify a directory with -d or --directory flag.")

    if args.eml_file:
        eml_file = args.eml_file
        if os.path.exists(eml_file) and eml_file.endswith('.eml'):
            html_content = eml_to_html(eml_file)
            output_file = os.path.splitext(eml_file)[0] + ".html"
            with open(output_file, 'w') as output:
                output.write(html_content)
        else:
            print("Invalid .eml file specified.")

    if args.html_file:
        html_file = args.html_file
        if os.path.exists(html_file) and (html_file.endswith('.html') or html_file.endswith('.htm')):
            add_href_to_file(html_file, "www.google.com")
        else:
            print("Invalid HTML file specified.")
    if args.go:
        eml_file = args.go
        if os.path.exists(eml_file) and eml_file.endswith('.eml'):
            file_path = '/home/gianpaolo_p/.bin/Liste/nomi_italiani.txt'
            nomi = read_values_from_file(file_path)
            file_path = '/home/gianpaolo_p/.bin/Liste/cognomi.txt'
            cognomi = read_values_from_file(file_path)
            html_content = eml_to_html(eml_file)
            modified_html = anonymizer(html_content)
            modified_html_with_href = add_href_to_anchor_tags(modified_html, '{{.URL}}')
            output_file = os.path.splitext(eml_file)[0] + ".html"
            with open(output_file, 'w') as output:
                output.write(modified_html_with_href)
        else:
            print("Invalid .eml file specified.")
        return
    if args.goes:
        if args.directory:
            gophishing_everything(args.directory)
        else:
            print("Please specify a directory with -d or --directory flag.")
        return
    if args.script_removal:
        if args.directory:
            directory_path = args.directory
            remove_scripts_from_directory(directory_path)
        elif args.html_file:
            html_file = args.html_file
            if os.path.exists(html_file) and (html_file.endswith('.html') or html_file.endswith('.htm')):
                remove_scripts_from_file(html_file)
            else:
                print("Invalid HTML file specified.")
        else:
            print("Please specify a directory with -d or --directory flag or an HTML file with --html_file flag.")
        return





def eml_to_html(eml_file):
    with open(eml_file, 'rb') as file:
        msg = BytesParser(policy=policy.default).parse(file)
    
    html_content = None
    for part in msg.walk():
        if part.get_content_type() == "text/html":
            html_content = part.get_payload(decode=True)
            break
    
    if html_content:
        return html_content.decode('utf-8', errors='replace')
    else:
        plain_text_part = msg.get_body(preferencelist=('plain',))
        if plain_text_part:
            return f"<html><body>{plain_text_part.get_content()}</body></html>"
        else:
            return "<html><body>No content found</body></html>"

"""def add_href_to_anchor_tags(html_content, new_href): # no support conditional
    soup = BeautifulSoup(html_content, 'html.parser')
    anchor_tags = soup.find_all('a')
    for tag in anchor_tags:
        tag['href'] = new_href
    return str(soup)"""

def add_href_to_anchor_tags(html_content, new_href):
    # Define a regular expression pattern to match anchor tags
    anchor_pattern = r'<a\s+(?:(?!-->).)*?>'
    # Define a regular expression pattern to match the href attribute within anchor tags
    href_pattern = r'href="([^"]*)"'

    def replace_href(match):
        href_attr = match.group(1)
        # Replace href attribute with the new href
        return f'href="{new_href}"'

    # Use re.sub to find anchor tags and modify their href attributes
    modified_html = re.sub(anchor_pattern, lambda match: re.sub(href_pattern, replace_href, match.group(0)), html_content)
    return modified_html

def add_href_to_file(file_path, new_href):
    with open(file_path, 'r', encoding='utf-8') as file:
        html_content = file.read()
    modified_html = add_href_to_anchor_tags(html_content, new_href)
    modified_html = modified_html.replace('</html>', '{{.Tracker}}\n</html>')
    with open(file_path, 'w', encoding='utf-8') as file:
        file.write(modified_html)

def anonymizer(html_content): # Still have to think (maybe list of all name possible?) Performance problem???
    email_pattern = r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b'

    modified_html = re.sub(email_pattern, '{{.Email}}', html_content)
    return modified_html

def gophishing_everything(directory_path):
    for root, dirs, files in os.walk(directory_path):
        for file in files:
            if file.endswith('.eml'):
                eml_file = os.path.join(root, file)
                html_content = eml_to_html(eml_file)
                modified_html = anonymizer(html_content)
                modified_html_with_href = add_href_to_anchor_tags(modified_html, '{{.URL}}')
                modified_html_with_href = modified_html_with_href.replace('</html>', '{{.Tracker}}\n</html>')
                modified_html_no_script = remove_scripts(modified_html_with_href)

                output_file = os.path.splitext(eml_file)[0] + ".html"
                with open(output_file, 'w') as output:
                    output.write(modified_html_no_script)

def remove_scripts_from_directory(directory_path):
    for root, dirs, files in os.walk(directory_path):
        for file in files:
            if file.endswith('.html') or file.endswith('.htm'):
                html_file = os.path.join(root, file)
                remove_scripts_from_file(html_file)


def remove_scripts(html_content):
    soup = BeautifulSoup(html_content, 'html.parser')

    # Remove all script tags
    for script in soup(['script']):
        script.extract()
    return str(soup)

def remove_scripts_from_file(html_file):
    with open(html_file, 'r', encoding='utf-8') as file:
        html_content = file.read()

    soup = BeautifulSoup(html_content, 'html.parser')

    # Remove all script tags
    for script in soup(['script']):
        script.extract()

    # Write the modified HTML content back to the file
    with open(html_file, 'w', encoding='utf-8') as file:
        file.write(str(soup))

if __name__ == "__main__":
    main()
